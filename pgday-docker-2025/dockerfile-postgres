###############################
##Author: Sashikanta Pattanayak
###############################

# Base image
FROM postgres:latest

# Metadata
LABEL maintainer="sashikanta"
LABEL version="1.0"
LABEL description="PostgreSQL with Essential DBA and Developer Productivity Tools"

# Arguments
ARG PG_SERVER_VERSION=17
ARG PG_SERVER_PORT=5432
ARG PG_UNIX_SOCKET_DIR="/var/run/postgresql"

# Environment variables
ENV PG_SERVER_PORT=${PG_SERVER_PORT}
ENV PG_UNIX_SOCKET_DIR=${PG_UNIX_SOCKET_DIR}
ENV PATH=/usr/lib/postgresql/${PG_SERVER_VERSION}/bin:$PATH:/usr/local/bin
ENV PGDATA=/var/lib/postgresql/data
ENV DEBIAN_FRONTEND=noninteractive
ENV SHELL=/bin/bash

# Create required directories
RUN mkdir -p \
    /var/lib/scripts \
    /var/lib/config \
    /var/lib/postgresql/archive \
    && chmod 755 \
    /var/lib/scripts \
    /var/lib/config \
    /var/lib/postgresql/archive \
    && chown postgres:postgres /var/lib/postgresql/archive

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3 \
    python3-dev \
    python3-pip \
    python3-venv \
    vim \
    procps \
    sysstat \
    wget \
    make \
    gcc \
    sudo \
    git \
    curl \
    perl \
    bc \
    build-essential \
    postgresql-server-dev-${PG_SERVER_VERSION} \
    postgresql-plpython3-${PG_SERVER_VERSION} \
    && rm -rf /var/lib/apt/lists/*


# Essential PostgreSQL Extensions
# Install plprofiler with proper error handling
RUN set -eux \
    && apt-get update \
    && apt-get install -y --no-install-recommends \
       git \
       build-essential \
       postgresql-server-dev-all \
       python3-dev \
       python3-setuptools \
    && git clone https://github.com/bigsql/plprofiler.git \
    && cd plprofiler \
    && make USE_PGXS=1 \
    && make USE_PGXS=1 install \
    && cd python-plprofiler \
    && python3 setup.py install \
    && cd ../.. \
    && rm -rf plprofiler \
    && rm -rf /var/lib/apt/lists/*

# pgbadger
RUN set -eux \
   && wget https://github.com/darold/pgbadger/archive/refs/tags/v12.3.tar.gz \
   && tar xzvf v12.3.tar.gz \
   && cd pgbadger-12.3 \
   && perl Makefile.PL \
   && make && make install \
   && cd .. \
   && rm -rf pgbadger-12.3 v12.3.tar.gz

#pg_partman
RUN set -eux \
   && git clone https://github.com/pgpartman/pg_partman.git \
   && cd pg_partman \
   && make \
   && make install \
   && cd .. \
   && rm -rf pg_partman

# Clone plpgsql_check and build/install it
RUN set -eux \
    && git clone https://github.com/okbob/plpgsql_check.git /tmp/plpgsql_check \
    && cd /tmp/plpgsql_check \
    && make USE_PGXS=1 install \
    && rm -rf /tmp/plpgsql_check

# Clone hypopg and install
RUN set -eux \
    && apt-get update \
    && apt-get install --no-install-recommends -y git build-essential postgresql-server-dev-${PG_SERVER_VERSION} \
    && git clone https://github.com/HypoPG/hypopg.git \
    && cd hypopg \
    && make \
    && make install \
    && cd .. \
    && rm -rf hypopg \
    && rm -rf /var/lib/apt/lists/*

# pg_cron, pg_repack, and pgaudit extensions
RUN set -eux \
   && apt-get update \
   && apt-get install --no-install-recommends -y \
      postgresql-${PG_SERVER_VERSION}-cron \
      postgresql-${PG_SERVER_VERSION}-repack \
      postgresql-${PG_SERVER_VERSION}-pgaudit \
   && rm -rf /var/lib/apt/lists/*

# Additional extensions
# pg_stat_monitor - enhanced query statistics
RUN set -eux \
   && git clone https://github.com/percona/pg_stat_monitor.git \
   && cd pg_stat_monitor \
   && make USE_PGXS=1 \
   && make USE_PGXS=1 install \
   && cd .. \
   && rm -rf pg_stat_monitor

# orafce - Oracle compatibility functions (commented out due to build issues)
# RUN set -eux \
#    && apt-get update \
#    && apt-get install -y --no-install-recommends \
#       libicu-dev \
#       pkg-config \
#    && git clone https://github.com/orafce/orafce.git \
#    && cd orafce \
#    && make USE_PGXS=1 clean || true \
#    && make USE_PGXS=1 \
#    && make USE_PGXS=1 install \
#    && cd .. \
#    && rm -rf orafce \
#    && apt-get clean \
#    && rm -rf /var/lib/apt/lists/*


RUN set -eux \
   && wget https://github.com/rapidloop/pgmetrics/releases/download/v1.15.0/pgmetrics_1.15.0_linux_amd64.tar.gz \
   && tar xzf pgmetrics_1.15.0_linux_amd64.tar.gz \
   && find . -name pgmetrics -type f -executable -exec mv {} /usr/local/bin/ \; \
   && rm -rf pgmetrics_1.15.0_linux_amd64.tar.gz pgmetrics_*

# pgCenter - command-line admin tool
RUN set -eux \
   && wget https://github.com/lesovsky/pgcenter/releases/download/v0.9.2/pgcenter_0.9.2_linux_amd64.tar.gz \
   && tar xzf pgcenter_0.9.2_linux_amd64.tar.gz \
   && find . -name pgcenter -type f -executable -exec mv {} /usr/local/bin/ \; \
   && rm -rf pgcenter_0.9.2_linux_amd64.tar.gz pgcenter_*

# Configure shared_preload_libraries in actual config
RUN echo "shared_preload_libraries = 'pg_stat_statements,pg_stat_monitor,plprofiler,auto_explain,pg_cron'" >> /usr/share/postgresql/postgresql.conf.sample

# Create initialization script for extensions
RUN mkdir -p /docker-entrypoint-initdb.d
COPY <<EOF /docker-entrypoint-initdb.d/01-create-extensions.sql
-- Create essential extensions
DO \$\$
BEGIN
    CREATE EXTENSION IF NOT EXISTS pg_stat_statements;
    RAISE NOTICE 'Created pg_stat_statements';
EXCEPTION WHEN OTHERS THEN
    RAISE WARNING 'Failed to create pg_stat_statements: %', SQLERRM;
END\$\$;

DO \$\$
BEGIN
    CREATE EXTENSION IF NOT EXISTS plprofiler;
    RAISE NOTICE 'Created plprofiler';
EXCEPTION WHEN OTHERS THEN
    RAISE WARNING 'Failed to create plprofiler: %', SQLERRM;
END\$\$;

DO \$\$
BEGIN
    CREATE EXTENSION IF NOT EXISTS hypopg;
    RAISE NOTICE 'Created hypopg';
EXCEPTION WHEN OTHERS THEN
    RAISE WARNING 'Failed to create hypopg: %', SQLERRM;
END\$\$;

DO \$\$
BEGIN
    CREATE EXTENSION IF NOT EXISTS pgaudit;
    RAISE NOTICE 'Created pgaudit';
EXCEPTION WHEN OTHERS THEN
    RAISE WARNING 'Failed to create pgaudit: %', SQLERRM;
END\$\$;

DO \$\$
BEGIN
    CREATE EXTENSION IF NOT EXISTS pg_cron;
    RAISE NOTICE 'Created pg_cron';
EXCEPTION WHEN OTHERS THEN
    RAISE WARNING 'Failed to create pg_cron: %', SQLERRM;
END\$\$;

DO \$\$
BEGIN
    CREATE SCHEMA IF NOT EXISTS partman;
    CREATE EXTENSION IF NOT EXISTS pg_partman WITH SCHEMA partman;
    RAISE NOTICE 'Created pg_partman';
EXCEPTION WHEN OTHERS THEN
    RAISE WARNING 'Failed to create pg_partman: %', SQLERRM;
END\$\$;

DO \$\$
BEGIN
    CREATE EXTENSION IF NOT EXISTS plpgsql_check;
    RAISE NOTICE 'Created plpgsql_check';
EXCEPTION WHEN OTHERS THEN
    RAISE WARNING 'Failed to create plpgsql_check: %', SQLERRM;
END\$\$;

DO \$\$
BEGIN
    CREATE EXTENSION IF NOT EXISTS pgstattuple;
    RAISE NOTICE 'Created pgstattuple';
EXCEPTION WHEN OTHERS THEN
    RAISE WARNING 'Failed to create pgstattuple: %', SQLERRM;
END\$\$;

DO \$\$
BEGIN
    CREATE EXTENSION IF NOT EXISTS pg_buffercache;
    RAISE NOTICE 'Created pg_buffercache';
EXCEPTION WHEN OTHERS THEN
    RAISE WARNING 'Failed to create pg_buffercache: %', SQLERRM;
END\$\$;

DO \$\$
BEGIN
    CREATE EXTENSION IF NOT EXISTS pg_prewarm;
    RAISE NOTICE 'Created pg_prewarm';
EXCEPTION WHEN OTHERS THEN
    RAISE WARNING 'Failed to create pg_prewarm: %', SQLERRM;
END\$\$;

DO \$\$
BEGIN
    CREATE EXTENSION IF NOT EXISTS pg_stat_monitor;
    RAISE NOTICE 'Created pg_stat_monitor';
EXCEPTION WHEN OTHERS THEN
    RAISE WARNING 'Failed to create pg_stat_monitor: %', SQLERRM;
END\$\$;

-- orafce extension commented out due to build issues
-- DO \$\$
-- BEGIN
--     CREATE EXTENSION IF NOT EXISTS orafce;
--     RAISE NOTICE 'Created orafce';
-- EXCEPTION WHEN OTHERS THEN
--     RAISE WARNING 'Failed to create orafce: %', SQLERRM;
-- END\$\$;

DO \$\$
BEGIN
    CREATE EXTENSION IF NOT EXISTS postgres_fdw;
    RAISE NOTICE 'Created postgres_fdw';
EXCEPTION WHEN OTHERS THEN
    RAISE WARNING 'Failed to create postgres_fdw: %', SQLERRM;
END\$\$;

DO \$\$
BEGIN
    CREATE EXTENSION IF NOT EXISTS file_fdw;
    RAISE NOTICE 'Created file_fdw';
EXCEPTION WHEN OTHERS THEN
    RAISE WARNING 'Failed to create file_fdw: %', SQLERRM;
END\$\$;

DO \$\$
BEGIN
    CREATE EXTENSION IF NOT EXISTS pg_repack;
    RAISE NOTICE 'Created pg_repack';
EXCEPTION WHEN OTHERS THEN
    RAISE WARNING 'Failed to create pg_repack: %', SQLERRM;
END\$\$;

DO \$\$
BEGIN
    CREATE EXTENSION IF NOT EXISTS auto_explain;
    RAISE NOTICE 'Created auto_explain';
EXCEPTION WHEN OTHERS THEN
    RAISE WARNING 'Failed to create auto_explain: %', SQLERRM;
END\$\$;
EOF
    
# Cleanup
RUN apt-get clean \
    && rm -rf \
    /tmp/* \
    /var/lib/apt/lists/* \
    /var/tmp/*

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD pg_isready -U postgres || exit 1

# Default port
EXPOSE ${PG_SERVER_PORT}

# Set work directory
WORKDIR /var/lib/postgresql

# Ensure proper permissions
RUN mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 2777 /var/run/postgresql

# Switch to postgres user
USER postgres

# Set entrypoint
ENTRYPOINT ["docker-entrypoint.sh"]
CMD ["postgres"]
